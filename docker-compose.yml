##
## Copyright (c) 2019 Matthias Tafelmeier.
##
## This file is part of godon
##
## godon is free software: you can redistribute it and/or modify
## it under the terms of the GNU Affero General Public License as
## published by the Free Software Foundation, either version 3 of the
## License, or (at your option) any later version.
##
## godon is distributed in the hope that it will be useful,
## but WITHOUT ANY WARRANTY; without even the implied warranty of
## MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
## GNU Affero General Public License for more details.
##
## You should have received a copy of the GNU Affero General Public License
## along with this godon. If not, see <http://www.gnu.org/licenses/>.
##
version: '3.4'
services:
    control_loop:
        image: apache/airflow:2.2.3-python3.9
        restart: always
        environment:
            - AIRFLOW__CORE__LOAD_DEFAULT_CONNECTIONS=True
            - AIRFLOW__CORE__DAGS_ARE_PAUSED_AT_CREATION=False
            - AIRFLOW__API__AUTH_BACKENDS=airflow.api.auth.backend.basic_auth
            - AIRFLOW__API__AUTH_BACKEND=airflow.api.auth.backend.basic_auth
            - 'AIRFLOW_CONN_LINUX_NETWORK_STACK_BREEDER_SSH={ "conn_type": "ssh", "login": "godon_robot", "host": "10.0.5.53", "port": 22, "extra": { "key_file": "/opt/airflow/credentials/id_rsa" } }'
        # minimum of setup steps
        # on sequencial executor and local sqlite
        entrypoint: bash -c "airflow db init; airflow users create -u airflow -p airflow -r Admin -f airflow -l airflow -e airflow; (airflow scheduler &); airflow webserver"
        volumes:
            - ./breeder/linux_network_stack/:/opt/airflow/dags
            - ./testing/infra/credentials/ssh/:/opt/airflow/credentials/
        ports:
            - 127.0.0.1:8080:8080
    api:
        build:
          context: ./api/flask/
        image: godon/api:latest
        restart: always
        environment:
          - AIRFLOW__URL=http://control_loop:8080
        ports:
          - 127.0.0.1:9000:8080
    # for optuna parallel metaheuristics execution on dask
    dask_scheduler:
      image: daskdev/dask:2022.12.1-py3.9
      hostname: dask-scheduler
      ports:
        - "8786:8786"
        - "8787:8787"
        - "8788:8788"
      command: ["dask-scheduler"]
    dask_ worker1:
      image: daskdev/dask:2022.12.1-py3.9
      command: ["dask-worker", "tcp://scheduler:8786"]
    dask_ worker2:
      image: daskdev/dask:2022.12.1-py3.9
      command: ["dask-worker", "tcp://scheduler:8788"]
