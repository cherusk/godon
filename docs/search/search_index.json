{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Introduction This project approaches the problem of optimizing infrastructure technologies as a continuous multi objective combinatorial optimization problem in a dynamic environment Meta-Heuristics, e.g. Evolutionary Algorithms (EA), have been found operating well in such optimization problem fields. Technologies throughout the stack are targeted. A focus is put on open technologies first. Overall optimizing, rearranging, calibrating of technology settings throughout the life-cycle of an instance of a technology are what is seeked to address with godon. Objective It is augmenting human operation engineers at bringing about performance improvements it simplifies the process through standardization and industrialization reduces prior knowledge needed about configuration changes and implications less toil in terms of engineering hours spent tackles the wide spread neglection of broader performance tuning pragmatic operations engineering complementing instrument focussed on open technologies first approximating an optimal state in a dynamic environment changing over time leveraging metaheuristics algorithms of all kinds to explore combinatorial configuration spaces betting on parallelization and acceleration of metaheuristics It is not fully off-hands automation as human setup, supervision and planning is required a machine learning or data analysis oriented technology kept to a minimum ideally only used if needed in the implementation details of a metaheuristic guaranteeing a global optimum in the search space of configurations rather approximating a better than untouched state a metaheuristics framework Sponsors Greatest esteem to: OSU Open Source Lab (https://osuosl.org) for bestowing generously with resources on their openstack infrastructure References [1] Inspiring POC work for the project; Autonomous_Configuration_of_Network_Parameters_in_Operating_Systems_using_Evolutionary_Algorithms [2] Underpinning the potential to accelerate metaheurstics by parallelization; A unified view of parallel multi-objective evolutionary algorithms","title":"Home"},{"location":"#introduction","text":"This project approaches the problem of optimizing infrastructure technologies as a continuous multi objective combinatorial optimization problem in a dynamic environment Meta-Heuristics, e.g. Evolutionary Algorithms (EA), have been found operating well in such optimization problem fields. Technologies throughout the stack are targeted. A focus is put on open technologies first. Overall optimizing, rearranging, calibrating of technology settings throughout the life-cycle of an instance of a technology are what is seeked to address with godon.","title":"Introduction"},{"location":"#objective","text":"","title":"Objective"},{"location":"#it-is","text":"augmenting human operation engineers at bringing about performance improvements it simplifies the process through standardization and industrialization reduces prior knowledge needed about configuration changes and implications less toil in terms of engineering hours spent tackles the wide spread neglection of broader performance tuning pragmatic operations engineering complementing instrument focussed on open technologies first approximating an optimal state in a dynamic environment changing over time leveraging metaheuristics algorithms of all kinds to explore combinatorial configuration spaces betting on parallelization and acceleration of metaheuristics","title":"It is"},{"location":"#it-is-not","text":"fully off-hands automation as human setup, supervision and planning is required a machine learning or data analysis oriented technology kept to a minimum ideally only used if needed in the implementation details of a metaheuristic guaranteeing a global optimum in the search space of configurations rather approximating a better than untouched state a metaheuristics framework","title":"It is not"},{"location":"#sponsors","text":"Greatest esteem to: OSU Open Source Lab (https://osuosl.org) for bestowing generously with resources on their openstack infrastructure","title":"Sponsors"},{"location":"#references","text":"[1] Inspiring POC work for the project; Autonomous_Configuration_of_Network_Parameters_in_Operating_Systems_using_Evolutionary_Algorithms [2] Underpinning the potential to accelerate metaheurstics by parallelization; A unified view of parallel multi-objective evolutionary algorithms","title":"References"},{"location":"architecture/","text":"Architecture Overview","title":"Architecture"},{"location":"architecture/#architecture","text":"","title":"Architecture"},{"location":"architecture/#overview","text":"","title":"Overview"},{"location":"usage/","text":"Use cases Idea is to run a continuous or periodic optimization cycle. Ideally, there should be a breeding sub landscape, where the GEAs can do their optimiziation part in a safe, non-invasive or even disruptive way. Replicating load or traffic patterns in such a replicate might appear challenging, but may not be necessary. A proper enough approximation might suffice for the larger fraction of practical use cases. The optimizer core is working on DEAP workers parallelized with help of a shim layer over commonplace distributed system orchestrator solutions. Further, the feed-back control loop is driven in jobs, perceiving aggregated telemetry and data of similar character gathered from the targeted objects. Also direct inspection of the breeding status has to be foreseen. After running the optimization via parallelized GEAs, the outcome will be applied on the breeder. This cycle will run until a customer defined acceptance or approximation epsilon has been reached or an another, maybe time-bound termination kicks in. Eventual outcome shall be a configuration perceived sufficiently optimal. It must be handed in structured way to the consumer, allowing him to apply the breeding result at higher criticality or the actual optimization target at his or her arbitration in the way most desired or applicable. Alternatively, customers will not be hampered from doing all the previously outlined directly on productive stacks. If the targeted sub-components are not of utmost criticallity, that could be a frequent scenario to expect also. It's a special case of the previously described anyways.","title":"Usage"},{"location":"usage/#use-cases","text":"Idea is to run a continuous or periodic optimization cycle. Ideally, there should be a breeding sub landscape, where the GEAs can do their optimiziation part in a safe, non-invasive or even disruptive way. Replicating load or traffic patterns in such a replicate might appear challenging, but may not be necessary. A proper enough approximation might suffice for the larger fraction of practical use cases. The optimizer core is working on DEAP workers parallelized with help of a shim layer over commonplace distributed system orchestrator solutions. Further, the feed-back control loop is driven in jobs, perceiving aggregated telemetry and data of similar character gathered from the targeted objects. Also direct inspection of the breeding status has to be foreseen. After running the optimization via parallelized GEAs, the outcome will be applied on the breeder. This cycle will run until a customer defined acceptance or approximation epsilon has been reached or an another, maybe time-bound termination kicks in. Eventual outcome shall be a configuration perceived sufficiently optimal. It must be handed in structured way to the consumer, allowing him to apply the breeding result at higher criticality or the actual optimization target at his or her arbitration in the way most desired or applicable. Alternatively, customers will not be hampered from doing all the previously outlined directly on productive stacks. If the targeted sub-components are not of utmost criticallity, that could be a frequent scenario to expect also. It's a special case of the previously described anyways.","title":"Use cases"}]}